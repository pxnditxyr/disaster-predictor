---
import { Icon } from 'astro-icon/components'
import ExpertLayout from '@/modules/expert/layouts/ExpertLayout.astro'
import { actions } from 'astro:actions'

const { id } = Astro.params
const { data: ourIconsData, error: findAllIconsError } = await actions.findAllOurIcons()
const { data: disasterTypesData, error: findOneError } = await actions.findAllDisasterTypes()
const { data: mitigationActionsData, error: findMitigationActionsError } = await actions.findOneMitigationAction({ id })

if ( findAllIconsError || findOneError || findMitigationActionsError ) return Astro.redirect( '/404' )

const { ourIcons } = ourIconsData
const { disasterTypes } = disasterTypesData
const { mitigationAction } = mitigationActionsData
const { description, actionList, objectives, disasterTypeId, riskLevel, icon, imageUrl, address, safetyLevel } = mitigationAction
---

<ExpertLayout>
  <div class="bg-cream-100 w-full min-h-screen py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-4xl mx-auto bg-white rounded-xl shadow-2xl overflow-hidden">
      <div class="bg-coffee-600 bg-opacity-90 p-6 text-cream-100">
        <h2 class="text-3xl font-bold flex items-center">
          <Icon name="mdi:plus-circle" class="w-8 h-8 mr-3 text-teal-300" />
          Editar Acci√≥n de Mitigaci√≥n üõ°Ô∏è
        </h2>
      </div>

      <form class="p-8 space-y-6" id="form">
        <input type="hidden" name="id" value={ id } />
        <div>
          <label for="description" class="block text-md font-medium text-coffee-700 mb-1">
            Descripci√≥n üìù <span class="text-red-500 text-xl">*</span>
          </label>
          <textarea
            id="description"
            name="description"
            rows={ 4 }
            required
            class="w-full px-3 py-2 border border-coffee-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-coffee-800"
            placeholder="Describe la acci√≥n de mitigaci√≥n..."
          >{ description }</textarea>
        </div>

        <div>
          <label
            class="block text-md font-medium text-coffee-700 mb-1"
            for="actionList"
          >
            Lista de Acciones üìã<span class="text-red-500 text-xl">*</span>
          </label>
          <textarea
            id="actionList"
            name="actionList"
            rows={ 4 }
            value={ actionList }
            required
            class="w-full px-3 py-2 border border-coffee-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-coffee-800"
            placeholder="Ingresa las acciones de mitigaci√≥n..."
          >{ actionList }</textarea>
        </div>

        <div>
          <label
            class="block text-md font-medium text-coffee-700 mb-1"
            for="objectives"
          >
            Objetivos üéØ <span class="text-green-500 text-sm">(Opcional)</span>
          </label>
          <textarea
            id="objectives"
            name="objectives"
            rows={ 4 }
            class="w-full px-3 py-2 border border-coffee-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-coffee-800"
            placeholder="Ingresa los objetivos de mitigaci√≥n..."
          >{ objectives }</textarea>
        </div>

        <div>
          <label for="disasterTypeId" class="block text-md font-medium text-coffee-700 mb-1">
            Tipo de Desastre üå™Ô∏è <span class="text-red-500 text-xl">*</span>
          </label>
          <select
            id="disasterTypeId"
            name="disasterTypeId"
            required
            class="w-full px-3 py-2 border border-coffee-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-coffee-800"
          >
            <option value="">Selecciona un tipo de desastre</option>
            {
              disasterTypes.filter( d => d.status ).map( ( disasterType ) => (
                <option
                  value={ disasterType.id }
                  selected={ disasterTypeId === disasterType.id }
                >
                  { disasterType.name }
                </option>
              ) ).reverse()
            }
          </select>
        </div>

        <div>
          <label for="riskLevel" class="block text-md font-medium text-coffee-700 mb-1">
            Nivel de Riesgo <span class="text-red-500 text-xl">*</span>
          </label>
          <select
            id="riskLevel"
            name="riskLevel"
            required
            class="w-full px-3 py-2 border border-coffee-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-coffee-800"
          >
            <option value="1" selected={ riskLevel === 1 }>Bajo</option>
            <option value="2" selected={ riskLevel === 2 }>Medio</option>
            <option value="3" selected={ riskLevel === 3 }>Alto</option>
          </select>
        </div>

        <div>
          <label for="icon" class="block text-md font-medium text-coffee-700 mb-1">
            Icono üñºÔ∏è <span class="text-green-500 text-sm">(Opcional)</span>
          </label>
          <div class="flex flex-wrap items-center gap-2 max-h-32 overflow-y-auto">
            {
            ourIcons.map( ({ name }) => (
            <div class="flex items-center space-x-2">
              <input
                type="radio"
                id={ name }
                name="icon"
                value={ name }
                class="w-4 h-4 border border-coffee-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-coffee-800"
                checked={ icon === name }
              />
              <label
                for={ name }
                class="text-coffee-800 text-sm"
              >
                <Icon
                  name={ name }
                  size={ 24 }
                  class="ml-2 text-teal-500"
                />
              </label>
            </div>
            ) ).reverse()
            }
          </div>
        </div>

        <div>
          <label for="imageUrl" class="block text-md font-medium text-coffee-700 mb-1">
            URL de la Imagen üñºÔ∏è <span class="text-green-500 text-sm">(Opcional)</span>
          </label>
          <input
            type="url"
            id="imageUrl"
            name="imageUrl"
            class="w-full px-3 py-2 border border-coffee-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-coffee-800"
            value={ imageUrl }
            placeholder="https://ejemplo.com/imagen.jpg"
          />
        </div>

        <div>
          <label for="address" class="block text-md font-medium text-coffee-700 mb-1">
            Direcci√≥n üìç <span class="text-green-500 text-sm">(Opcional)</span>
          </label>
          <input
            type="text"
            id="address"
            name="address"
            value={ address }
            class="w-full px-3 py-2 border border-coffee-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-coffee-800"
            placeholder="Ingresa la direcci√≥n"
          />
        </div>

        <div>
          <label for="safetyLevel" class="block text-md font-medium text-coffee-700 mb-1">
            Nivel de Seguridad üõ°Ô∏è <span class="text-red-500 text-xl">*</span>
          </label>
          <input
            type="range"
            id="safetyLevel"
            name="safetyLevel"
            min="1"
            max="5"
            class="w-full"
            value={ safetyLevel }
            required
          />
          <div class="flex justify-between text-xs text-coffee-600">
            <span>1</span>
            <span>2</span>
            <span>3</span>
            <span>4</span>
            <span>5</span>
          </div>
        </div>

        <div class="flex justify-end space-x-3 pt-6">
          <button
            type="submit"
            class="px-6 py-2 border border-transparent text-white bg-teal-600 rounded-md hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 transition duration-300 shadow-md"
          >
            Guardar Acci√≥n de Mitigaci√≥n
          </button>
        </div>
      </form>
    </div>
  </div>
</ExpertLayout>
<script>
import { actions } from 'astro:actions'
import { getErrorMessage } from '@/utils'
import Swal from 'sweetalert2'


const form = document.querySelector( '#form' ) as HTMLFormElement
const submitButton = document.querySelector( 'button' ) as HTMLButtonElement

form.addEventListener( 'submit', async ( event ) => {
  event.preventDefault()
  submitButton.disabled = true

  const formData = new FormData( form )

  const { error } = await actions.updateMitigationAction( formData )

  if ( error ) {

    const errorMessage = getErrorMessage( error )

    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: errorMessage,
    })

    submitButton.disabled = false
    return
  }

  window.location.href = '/expert/mitigations'
} )

</script>
<style>
textarea {
  resize: none;
  min-height: 100px;
  form-sizing: content;
  max-height: 200px;
}
</style>

